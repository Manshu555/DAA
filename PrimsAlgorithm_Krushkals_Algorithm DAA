#include <bits/stdc++.h>
using namespace std;

int findParent(int u, vector<int>& parent) {
    if (parent[u] == u)
        return u;
    return parent[u] = findParent(parent[u], parent); // Path compression
}

void unionSets(int u, int v, vector<int>& parent, vector<int>& rank) {
    u = findParent(u, parent);
    v = findParent(v, parent);

    if (rank[u] < rank[v]) {
        parent[u] = v;
    } else if (rank[u] > rank[v]) {
        parent[v] = u;
    } else {
        parent[v] = u;
        rank[u]++;
    }
}

int kruskalMST(int V, vector<vector<int>>& edges) {
    // Sort all edges based on weight
    sort(edges.begin(), edges.end(), [](vector<int>& a, vector<int>& b) {
        return a[2] < b[2];
    });

    vector<int> parent(V); // V vertices
    vector<int> rank(V, 0);
    vector<vector<int>> result; // Store the result MST

    // Initialize the parent array for each vertex
    for (int i = 0; i < V; i++) {
        parent[i] = i;
    }

    // Process each edge in the sorted order
    for (auto edge : edges) {
        int u = edge[0];
        int v = edge[1];
        int weight = edge[2];

        int setU = findParent(u, parent);
        int setV = findParent(v, parent);

        // If u and v belong to different sets, include this edge in the MST
        if (setU != setV) {
            result.push_back(edge);
            unionSets(setU, setV, parent, rank);
        }
    }

    // Output the edges in the MST and calculate the total weight
    int totalWeight = 0;
    cout << "Edges in the MST:\n";
    for (auto edge : result) {
        char u = edge[0] + 'A'; // Convert back to character
        char v = edge[1] + 'A'; // Convert back to character
        cout << u << " - " << v << " : " << edge[2] << endl;
        totalWeight += edge[2];
    }
    return totalWeight;
}

int main() {
    int V, E;

    cin >> V >> E;

    vector<vector<int>> edges; // Store edges as {u, v, weight}
    for (int i = 0; i < E; i++) {
        char A, B;
        int weight;
        cin >> A >> B >> weight;
        int u = A - 'A'; // Convert character to integer (0-based index)
        int v = B - 'A'; // Convert character to integer
        edges.push_back({u, v, weight});
    }

    int totalWeight = kruskalMST(V, edges);
    cout << "Total weight of the MST: " << totalWeight << endl;

    return 0;
}









#include <bits/stdc++.h>
using namespace std;

int prims_algorithm(vector<vector<int>> &G, int V) {
    int TotalCost = 0;
    int no_edge = 0;
    vector<bool> selected(V, false);
    selected[0] = true;
    int x, y;

    cout << "Edge : Weight" << endl;

    while (no_edge < V - 1) {
        int min = INT_MAX;
        x = 0;
        y = 0;

        for (int i = 0; i < V; i++) {
            if (selected[i]) {
                for (int j = 0; j < V; j++) {
                    if (!selected[j] && G[i][j]) {
                        if (min > G[i][j]) {
                            min = G[i][j];
                            x = i;
                            y = j;
                        }
                    }
                }
            }
        }

        TotalCost += G[x][y];
        cout << char(x + 'A') << " - " << char(y + 'A') << " : " << G[x][y] << endl;
        selected[y] = true;
        no_edge++;
    }

    return TotalCost;
}

int main() {
    int V, E;
    cin >> V >> E;
    vector<vector<int>> G(V, vector<int>(V, 0));
    for (int i = 0; i < E; i++) {
        char A, B;
        int weight;
        cin >> A >> B >> weight;
        int u = A - 'A';
        int v = B - 'A';
        G[u][v] = weight;
        G[v][u] = weight;
    }
    int totalCost = prims_algorithm(G, V);
    cout << "Total cost of the MST: " << totalCost << endl;
    return 0;
}
